{"version":3,"sources":["../../src/controllers/progress.controller.js"],"names":["ProgressController","create","req","res","payload","body","user","models","Progress","isComplete","userId","questionnaireId","status","json","error","message","update","progressId","params","result","ProgressService","updateCurrentUserProgress","delete","get","getAll","getCombinedProgress"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;;;AAGe,MAAMA,kBAAN,CAAyB;AACtC;;;;;;AAMA,eAAaC,MAAb,CAAoBC,GAApB,EAAyBC,GAAzB,EAA8B;AAC5B,UAAMC,OAAO,GAAGF,GAAG,CAACG,IAAJ,IAAY,EAA5B;;AAEA,QAAI;AACF,YAAMC,IAAI,GAAG,MAAMC,kBAAOC,QAAP,CAChBP,MADgB,CACT;AACNQ,QAAAA,UAAU,EAAE,KADN;AAENC,QAAAA,MAAM,EAAEN,OAAO,CAACM,MAFV;AAGNC,QAAAA,eAAe,EAAEP,OAAO,CAACO;AAHnB,OADS,CAAnB;AAOAR,MAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBP,IAArB;AACD,KATD,CASE,OAAOQ,KAAP,EAAc;AACdX,MAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,KAAK,CAACC,OAA3B;AACD;AACF;AAED;;;;;;;;AAMA,eAAaC,MAAb,CAAoBd,GAApB,EAAyBC,GAAzB,EAA8B;AAC5B,UAAMc,UAAU,GAAGf,GAAG,CAACgB,MAAJ,CAAWD,UAA9B;AACA,UAAMb,OAAO,GAAGF,GAAG,CAACG,IAAJ,IAAY,EAA5B;;AAEA,QAAI;AACF,YAAMc,MAAM,GAAG,MAAMC,0BAAgBC,yBAAhB,CAA0CJ,UAA1C,EAAsDb,OAAtD,CAArB;AACAD,MAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBM,MAArB;AACD,KAHD,CAGE,OAAOL,KAAP,EAAc;AACdX,MAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,KAAK,CAACC,OAA3B;AACD;AACF;;AAED,eAAaO,MAAb,CAAoBpB,GAApB,EAAyBC,GAAzB,EAA8B;AAC5BA,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,iBAArB;AACD;;AAED,eAAaU,GAAb,CAAiBrB,GAAjB,EAAsBC,GAAtB,EAA2B;AACzBA,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,iBAArB;AACD;AAED;;;;;;;;AAMA,eAAaW,MAAb,CAAoBtB,GAApB,EAAyBC,GAAzB,EAA8B;AAC5B,UAAMO,MAAM,GAAGR,GAAG,CAACgB,MAAJ,CAAWR,MAA1B;;AAEA,QAAI;AACF,YAAMS,MAAM,GAAG,MAAMC,0BAAgBK,mBAAhB,CAAoCf,MAApC,CAArB;AACAP,MAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBM,MAArB;AACD,KAHD,CAGE,OAAOL,KAAP,EAAc;AACdX,MAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBE,QAAAA,OAAO,EAAG,GAAED,KAAK,CAACC,OAAQ;AADP,OAArB;AAGD;AACF;;AAnEqC","sourcesContent":["import models from '../db-models';\r\nimport { ProgressService } from '../services';\r\n\r\n/**\r\n * Progress CRUD operations controller\r\n */\r\nexport default class ProgressController {\r\n  /**\r\n   * Create Progress record\r\n   * \r\n   * @param {Object} req \r\n   * @param {Object} res \r\n   */\r\n  static async create(req, res) {\r\n    const payload = req.body || {};\r\n\r\n    try {\r\n      const user = await models.Progress\r\n        .create({\r\n          isComplete: false,\r\n          userId: payload.userId,\r\n          questionnaireId: payload.questionnaireId\r\n        });\r\n\r\n      res.status(201).json(user);\r\n    } catch (error) {\r\n      res.status(400).json(error.message);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update existing Progress record\r\n   * \r\n   * @param {Object} req \r\n   * @param {Object} res \r\n   */\r\n  static async update(req, res) {\r\n    const progressId = req.params.progressId;\r\n    const payload = req.body || {};\r\n    \r\n    try {\r\n      const result = await ProgressService.updateCurrentUserProgress(progressId, payload);\r\n      res.status(200).json(result);\r\n    } catch (error) {\r\n      res.status(400).json(error.message);\r\n    }\r\n  }\r\n\r\n  static async delete(req, res) {\r\n    res.status(501).json('not implemented');\r\n  }\r\n\r\n  static async get(req, res) {\r\n    res.status(501).json('not implemented');\r\n  }\r\n\r\n  /**\r\n   * Get all Progresses for a specific User\r\n   * \r\n   * @param {Object} req \r\n   * @param {Object} res \r\n   */\r\n  static async getAll(req, res) {\r\n    const userId = req.params.userId;\r\n\r\n    try {\r\n      const result = await ProgressService.getCombinedProgress(userId);\r\n      res.status(200).json(result);\r\n    } catch (error) {\r\n      res.status(400).json({\r\n        message: `${error.message}`,\r\n      });\r\n    }\r\n  }\r\n}\r\n"],"file":"progress.controller.js"}