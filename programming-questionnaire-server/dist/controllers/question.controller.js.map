{"version":3,"sources":["../../src/controllers/question.controller.js"],"names":["QuestionController","create","req","res","status","json","update","delete","get","questionId","params","question","models","Question","findByPk","error","send","message","getAll","questId","items","findAll","where","questionnaireId","include","model","Answer","as"],"mappings":";;;;;;;AAAA;;;;AAEA;;;AAGe,MAAMA,kBAAN,CAAyB;AACtC,eAAaC,MAAb,CAAoBC,GAApB,EAAyBC,GAAzB,EAA8B;AAC5BA,IAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,iBAArB;AACD;;AAED,eAAaC,MAAb,CAAoBJ,GAApB,EAAyBC,GAAzB,EAA8B;AAC5BA,IAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,iBAArB;AACD;;AAED,eAAaE,MAAb,CAAoBL,GAApB,EAAyBC,GAAzB,EAA8B;AAC5BA,IAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,iBAArB;AACD;AAED;;;;;;;;AAMA,eAAaG,GAAb,CAAiBN,GAAjB,EAAsBC,GAAtB,EAA2B;AACzB,UAAMM,UAAU,GAAGP,GAAG,CAACQ,MAAJ,CAAWD,UAA9B;;AAEA,QAAI;AACF,YAAME,QAAQ,GAAG,MAAMC,kBAAOC,QAAP,CAAgBC,QAAhB,CAA0B,GAAEL,UAAW,EAAvC,CAAvB;AAEAN,MAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBM,QAArB;AACD,KAJD,CAIE,OAAOI,KAAP,EAAc;AACdZ,MAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBY,IAAhB,CAAqB;AACnBC,QAAAA,OAAO,EAAG,GAAEF,KAAK,CAACE,OAAQ;AADP,OAArB;AAGD;AACF;AAED;;;;;;;;AAMA,eAAaC,MAAb,CAAoBhB,GAApB,EAAyBC,GAAzB,EAA8B;AAC5B,UAAMgB,OAAO,GAAGjB,GAAG,CAACQ,MAAJ,CAAWS,OAA3B;;AAEA,QAAI;AACF,YAAMC,KAAK,GAAG,MAAMR,kBAAOC,QAAP,CAAgBQ,OAAhB,CAAwB;AAC1CC,QAAAA,KAAK,EAAE;AACLC,UAAAA,eAAe,EAAEJ;AADZ,SADmC;AAI1CK,QAAAA,OAAO,EAAE,CAAC;AACRC,UAAAA,KAAK,EAAEb,kBAAOc,MADN;AAERC,UAAAA,EAAE,EAAE;AAFI,SAAD;AAJiC,OAAxB,CAApB;AAUAxB,MAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBe,KAArB;AACD,KAZD,CAYE,OAAOL,KAAP,EAAc;AACdZ,MAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBY,QAAAA,OAAO,EAAG,GAAEF,KAAK,CAACE,OAAQ;AADP,OAArB;AAGD;AAEF;;AA5DqC","sourcesContent":["import models from '../db-models';\r\n\r\n/**\r\n * Question CRUD operations controller\r\n */\r\nexport default class QuestionController {\r\n  static async create(req, res) {\r\n    res.status(501).json('not implemented');\r\n  }\r\n\r\n  static async update(req, res) {\r\n    res.status(501).json('not implemented');\r\n  }\r\n\r\n  static async delete(req, res) {\r\n    res.status(501).json('not implemented');\r\n  }\r\n\r\n  /**\r\n   * Get a specific Question by ID\r\n   * \r\n   * @param {Object} req \r\n   * @param {Object} res \r\n   */\r\n  static async get(req, res) {\r\n    const questionId = req.params.questionId;\r\n    \r\n    try {\r\n      const question = await models.Question.findByPk(`${questionId}`);\r\n\r\n      res.status(200).json(question);\r\n    } catch (error) {\r\n      res.status(400).send({\r\n        message: `${error.message}`,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all Questions and relevant Answers for a specific Questionnaire\r\n   * \r\n   * @param {Object} req \r\n   * @param {Object} res \r\n   */\r\n  static async getAll(req, res) {\r\n    const questId = req.params.questId;\r\n\r\n    try {\r\n      const items = await models.Question.findAll({\r\n        where: {\r\n          questionnaireId: questId\r\n        },\r\n        include: [{\r\n          model: models.Answer,\r\n          as: 'answers'\r\n        }]\r\n      });\r\n\r\n      res.status(200).json(items);\r\n    } catch (error) {\r\n      res.status(400).json({\r\n        message: `${error.message}`,\r\n      });\r\n    }\r\n\r\n  }\r\n}\r\n"],"file":"question.controller.js"}