{"version":3,"sources":["../../src/controllers/authorization.controller.js"],"names":["TOKEN_EXP_TIME","AuthorizationController","auth","req","res","user","models","User","findOne","where","username","body","password","BC","compareSync","signUser","id","email","token","JWT","sign","config","secret","expiresIn","status","send","data","message","error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,cAAc,GAAG,KAAvB;AAEA;;;;AAGe,MAAMC,uBAAN,CAA8B;AAC3C;;;;;;AAMA,eAAaC,IAAb,CAAkBC,GAAlB,EAAuBC,GAAvB,EAA4B;AAC1B,QAAI;AACF,YAAMC,IAAI,GAAG,MAAMC,kBAAOC,IAAP,CAAYC,OAAZ,CAAoB;AACrCC,QAAAA,KAAK,EAAE;AACLC,UAAAA,QAAQ,EAAEP,GAAG,CAACQ,IAAJ,CAASD;AADd;AAD8B,OAApB,CAAnB;;AAMA,UAAIL,IAAI,IAAIF,GAAG,CAACQ,IAAJ,CAASC,QAAjB,IAA6BC,kBAAGC,WAAH,CAAeX,GAAG,CAACQ,IAAJ,CAASC,QAAxB,EAAkCP,IAAI,CAACO,QAAvC,CAAjC,EAAmF;AACjF,cAAMG,QAAQ,GAAG;AACfC,UAAAA,EAAE,EAAEX,IAAI,CAACW,EADM;AAEfN,UAAAA,QAAQ,EAAEL,IAAI,CAACK,QAFA;AAGfO,UAAAA,KAAK,EAAEZ,IAAI,CAACY;AAHG,SAAjB;;AAKA,cAAMC,KAAK,GAAGC,sBAAIC,IAAJ,CAASL,QAAT,EAAmBM,gBAAOC,MAA1B,EAAkC;AAAEC,UAAAA,SAAS,EAAEvB;AAAb,SAAlC,CAAd;;AAEAI,QAAAA,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,UAAAA,IAAI,EAAE;AACJrB,YAAAA,IAAI,EAAEU;AADF,WADa;AAInBG,UAAAA,KAAK,EAAEA;AAJY,SAArB;AAMD,OAdD,MAcO;AACLd,QAAAA,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBE,UAAAA,OAAO,EAAE,gBADU;AAEnBD,UAAAA,IAAI,EAAE;AAFa,SAArB;AAID;AACF,KA3BD,CA2BE,OAAOE,KAAP,EAAc;AACdxB,MAAAA,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBE,QAAAA,OAAO,EAAG,0BAAyBC,KAAK,CAACD,OAAQ,EAD9B;AAEnBD,QAAAA,IAAI,EAAE;AAFa,OAArB;AAID;AACF;;AAzC0C","sourcesContent":["import BC from 'bcryptjs';\r\nimport JWT from 'jsonwebtoken';\r\nimport models from '../db-models';\r\nimport config from '../config';\r\n\r\nconst TOKEN_EXP_TIME = 86400;\r\n\r\n/**\r\n * Auth CRUD operations controller\r\n */\r\nexport default class AuthorizationController {\r\n  /**\r\n   * Issue JWT to the existing user\r\n   * \r\n   * @param {Object} req \r\n   * @param {Object} res \r\n   */\r\n  static async auth(req, res) {\r\n    try {\r\n      const user = await models.User.findOne({\r\n        where: {\r\n          username: req.body.username\r\n        }\r\n      });\r\n\r\n      if (user && req.body.password && BC.compareSync(req.body.password, user.password)) {\r\n        const signUser = {\r\n          id: user.id,\r\n          username: user.username,\r\n          email: user.email\r\n        };\r\n        const token = JWT.sign(signUser, config.secret, { expiresIn: TOKEN_EXP_TIME });\r\n  \r\n        res.status(200).send({\r\n          data: {\r\n            user: signUser\r\n          },\r\n          token: token\r\n        });\r\n      } else {\r\n        res.status(404).send({\r\n          message: 'User Not Found',\r\n          data: null\r\n        });\r\n      }\r\n    } catch (error) {\r\n      res.status(404).send({\r\n        message: `An error has occurred: ${error.message}`,\r\n        data: null\r\n      });\r\n    }\r\n  }\r\n}\r\n"],"file":"authorization.controller.js"}