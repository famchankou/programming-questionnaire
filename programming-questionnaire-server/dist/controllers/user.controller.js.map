{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["UserController","create","req","res","user","models","User","body","password","BC","hashSync","genSaltSync","status","json","error","message","update","userId","params","findByPk","username","email","delete","destroy","where","id","get"],"mappings":"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","sourcesContent":["import models from '../db-models';\r\nimport BC from 'bcryptjs';\r\n\r\n/**\r\n * User CRUD operations controller\r\n */\r\nexport default class UserController {\r\n  /**\r\n   * Crete User record\r\n   * \r\n   * @param {Object} req \r\n   * @param {Object} res \r\n   */\r\n  static async create(req, res) {\r\n    try {\r\n      const user = await models.User\r\n        .create({\r\n          ...req.body,\r\n          password: BC.hashSync(req.body.password, BC.genSaltSync(10))\r\n        });\r\n\r\n      res.status(201).json(user);\r\n    } catch (error) {\r\n      res.status(400).json(error.message);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update User record\r\n   * \r\n   * @param {Object} req \r\n   * @param {Object} res \r\n   */\r\n  static async update(req, res) {\r\n    const userId = req.params.userId;\r\n\r\n    try {\r\n      const user = await models.User.findByPk(`${userId}`);\r\n\r\n      if (!user) {\r\n        res.status(404).json({\r\n          message: 'User Not Found',\r\n        });\r\n      } else {\r\n        await user\r\n          .update({\r\n            username: req.body.username || user.username,\r\n            email: req.body.email || user.email,\r\n            password: req.body.password ? BC.hashSync(req.body.password, BC.genSaltSync(10)) : user.password,\r\n          });\r\n\r\n        res.status(200).json();\r\n      }\r\n    } catch (error) {\r\n      res.status(400).json(error.message);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete User record\r\n   * \r\n   * @param {Object} req \r\n   * @param {Object} res \r\n   */\r\n  static async delete(req, res) {\r\n    const userId = req.params.userId;\r\n\r\n    try {\r\n      await models.User\r\n        .destroy({\r\n          where: {\r\n            id: userId\r\n          }\r\n        });\r\n\r\n      res.status(204).json();\r\n    } catch (error) {\r\n      res.status(400).json(error.message);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get specific User by ID\r\n   * \r\n   * @param {Object} req \r\n   * @param {Object} res \r\n   */\r\n  static async get(req, res) {\r\n    const userId = req.params.userId;\r\n\r\n    try {\r\n      const user = await models.User.findByPk(`${userId}`);\r\n\r\n      if (user) {\r\n        res.status(200).json(user);\r\n      } else {\r\n        res.status(404).json({\r\n          message: 'User Not Found',\r\n        });\r\n      }\r\n    } catch (error) {\r\n      res.status(400).json(`${error.message}`);\r\n    }\r\n  }\r\n}\r\n"],"file":"user.controller.js"}