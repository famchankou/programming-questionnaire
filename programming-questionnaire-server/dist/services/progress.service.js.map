{"version":3,"sources":["../../src/services/progress.service.js"],"names":["ProgressService","updateCurrentUserProgress","progressId","payload","progress","models","Progress","findByPk","include","model","Answer","as","answer","findOne","where","id","answerId","setAnswers","answers","update","isComplete","getCombinedProgress","userId","progresses","findAll","generateCombinedProgress","quest","Questionnaire","questionnaireId","Question","correctAnswers","filter","isCorrect","filterQuestions","question","map","questionId","indexOf","questionnaireTitle","title","answeredQuestions","questions","Promise","all"],"mappings":";;;;;;;AAAA;;;;AAEe,MAAMA,eAAN,CAAsB;AAEnC;;;;;;;AAOA,eAAaC,yBAAb,CAAuCC,UAAvC,EAAmDC,OAAnD,EAA4D;AAC1D,UAAMC,QAAQ,GAAG,MAAMC,kBAAOC,QAAP,CAAgBC,QAAhB,CAA0B,GAAEL,UAAW,EAAvC,EAA0C;AAC/DM,MAAAA,OAAO,EAAE,CAAC;AACRC,QAAAA,KAAK,EAAEJ,kBAAOK,MADN;AAERC,QAAAA,EAAE,EAAE;AAFI,OAAD;AADsD,KAA1C,CAAvB;AAMA,UAAMC,MAAM,GAAG,MAAMP,kBAAOK,MAAP,CAAcG,OAAd,CAAsB;AACzCC,MAAAA,KAAK,EAAE;AACLC,QAAAA,EAAE,EAAEZ,OAAO,CAACa;AADP;AADkC,KAAtB,CAArB;AAKAZ,IAAAA,QAAQ,CAACa,UAAT,CAAoB,CAAC,GAAGb,QAAQ,CAACc,OAAb,EAAsBN,MAAtB,CAApB;AAEAR,IAAAA,QAAQ,CAACe,MAAT,CAAgB;AACdC,MAAAA,UAAU,EAAEjB,OAAO,CAACiB;AADN,KAAhB;AAIA,WAAOhB,QAAP;AACD;AAED;;;;;;;AAKA,eAAaiB,mBAAb,CAAiCC,MAAjC,EAAyC;AACvC,UAAMC,UAAU,GAAG,MAAMlB,kBAAOC,QAAP,CAAgBkB,OAAhB,CAAwB;AAC/CV,MAAAA,KAAK,EAAE;AACLQ,QAAAA,MAAM,EAAEA;AADH,OADwC;AAI/Cd,MAAAA,OAAO,EAAE,CAAC;AACRC,QAAAA,KAAK,EAAEJ,kBAAOK,MADN;AAERC,QAAAA,EAAE,EAAE;AAFI,OAAD;AAJsC,KAAxB,CAAzB;AAUA;;;;;;;AAMA,UAAMc,wBAAwB,GAAG,MAAOrB,QAAP,IAAoB;AACnD,YAAMsB,KAAK,GAAG,MAAMrB,kBAAOsB,aAAP,CAAqBpB,QAArB,CAA8BH,QAAQ,CAACwB,eAAvC,EAAwD;AAC1EpB,QAAAA,OAAO,EAAE,CAAC;AACRC,UAAAA,KAAK,EAAEJ,kBAAOwB,QADN;AAERlB,UAAAA,EAAE,EAAE;AAFI,SAAD;AADiE,OAAxD,CAApB;AAMA,YAAMmB,cAAc,GAAG,CAAC,GAAG1B,QAAQ,CAACc,OAAb,EAAsBa,MAAtB,CAA6BnB,MAAM,IAAIA,MAAM,CAACoB,SAA9C,CAAvB;;AACA,YAAMC,eAAe,GAAGC,QAAQ,IAAI,CAAC,GAAG9B,QAAQ,CAACc,OAAb,EAAsBiB,GAAtB,CAA0BvB,MAAM,IAAIA,MAAM,CAACwB,UAA3C,EAAuDC,OAAvD,CAA+DH,QAAQ,CAACnB,EAAxE,MAAgF,CAAC,CAArH;;AAEA,aAAO;AACLb,QAAAA,UAAU,EAAEE,QAAQ,CAACW,EADhB;AAELO,QAAAA,MAAM,EAAElB,QAAQ,CAACkB,MAFZ;AAGLgB,QAAAA,kBAAkB,EAAEZ,KAAK,CAACa,KAHrB;AAILX,QAAAA,eAAe,EAAExB,QAAQ,CAACwB,eAJrB;AAKLE,QAAAA,cAAc,EAAEA,cALX;AAMLU,QAAAA,iBAAiB,EAAE,CAAC,GAAGd,KAAK,CAACe,SAAN,CAAgBV,MAAhB,CAAuBE,eAAvB,CAAJ,CANd;AAOLb,QAAAA,UAAU,EAAEhB,QAAQ,CAACgB;AAPhB,OAAP;AASD,KAnBD;;AAqBA,WAAOsB,OAAO,CAACC,GAAR,CAAYpB,UAAU,CAACY,GAAX,CAAe/B,QAAQ,IAAIqB,wBAAwB,CAACrB,QAAD,CAAnD,CAAZ,CAAP;AACD;;AA1EkC","sourcesContent":["import models from '../db-models';\r\n\r\nexport default class ProgressService {\r\n\r\n  /**\r\n   * Updates progress record: adds new answer to the user progress and set \r\n   * complete state when necessary\r\n   * \r\n   * @param {String} progressId \r\n   * @param {Object} payload \r\n   */\r\n  static async updateCurrentUserProgress(progressId, payload) {\r\n    const progress = await models.Progress.findByPk(`${progressId}`, {\r\n      include: [{\r\n        model: models.Answer,\r\n        as: 'answers'\r\n      }]\r\n    });\r\n    const answer = await models.Answer.findOne({\r\n      where: {\r\n        id: payload.answerId\r\n      }\r\n    });\r\n    progress.setAnswers([...progress.answers, answer]);\r\n\r\n    progress.update({\r\n      isComplete: payload.isComplete\r\n    });\r\n\r\n    return progress;\r\n  }\r\n\r\n  /**\r\n   * Returns combined progress: Progress, Answered Questions, Correct Answers\r\n   * \r\n   * @param {String} userId \r\n   */\r\n  static async getCombinedProgress(userId) {\r\n    const progresses = await models.Progress.findAll({\r\n      where: {\r\n        userId: userId\r\n      },\r\n      include: [{\r\n        model: models.Answer,\r\n        as: 'answers'\r\n      }]\r\n    });\r\n\r\n    /**\r\n     * Forms combined progerss for a certain user which includes data necessary for\r\n     * forming the charts statistics\r\n     * \r\n     * @param {Object} progress \r\n     */\r\n    const generateCombinedProgress = async (progress) => {\r\n      const quest = await models.Questionnaire.findByPk(progress.questionnaireId, {\r\n        include: [{\r\n          model: models.Question,\r\n          as: 'questions'\r\n        }]\r\n      });\r\n      const correctAnswers = [...progress.answers].filter(answer => answer.isCorrect);\r\n      const filterQuestions = question => [...progress.answers].map(answer => answer.questionId).indexOf(question.id) !== -1;\r\n\r\n      return {\r\n        progressId: progress.id,\r\n        userId: progress.userId,\r\n        questionnaireTitle: quest.title,\r\n        questionnaireId: progress.questionnaireId,\r\n        correctAnswers: correctAnswers,\r\n        answeredQuestions: [...quest.questions.filter(filterQuestions)],\r\n        isComplete: progress.isComplete\r\n      };\r\n    };\r\n\r\n    return Promise.all(progresses.map(progress => generateCombinedProgress(progress)));\r\n  }\r\n}\r\n"],"file":"progress.service.js"}