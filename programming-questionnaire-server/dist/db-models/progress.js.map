{"version":3,"sources":["../../src/db-models/progress.js"],"names":["progress","sequelize","DataTypes","Progress","define","id","allowNull","primaryKey","type","Sequelize","UUID","defaultValue","isComplete","BOOLEAN","field","userId","onDelete","references","model","key","as","questionnaireId","indexes","fields","unique","args","msg","associate","models","belongsTo","Questionnaire","foreignKey","User","belongsToMany","Answer","through"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;;;;;;;AAOA,MAAMA,QAAQ,GAAG,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACzC,QAAMC,QAAQ,GAAGF,SAAS,CAACG,MAAV,CAAiB,UAAjB,EAA6B;AAC5CC,IAAAA,EAAE,EAAE;AACFC,MAAAA,SAAS,EAAE,KADT;AAEFC,MAAAA,UAAU,EAAE,IAFV;AAGFC,MAAAA,IAAI,EAAEC,mBAAUC,IAHd;AAIFC,MAAAA,YAAY,EAAE,MAAM;AAJlB,KADwC;AAO5CC,IAAAA,UAAU,EAAE;AACVJ,MAAAA,IAAI,EAAEN,SAAS,CAACW,OADN;AAEVC,MAAAA,KAAK,EAAE,aAFG;AAGVR,MAAAA,SAAS,EAAE;AAHD,KAPgC;AAY5CS,IAAAA,MAAM,EAAE;AACNP,MAAAA,IAAI,EAAEC,mBAAUC,IADV;AAENM,MAAAA,QAAQ,EAAE,SAFJ;AAGNF,MAAAA,KAAK,EAAE,SAHD;AAING,MAAAA,UAAU,EAAE;AACVC,QAAAA,KAAK,EAAE,OADG;AAEVC,QAAAA,GAAG,EAAE,IAFK;AAGVC,QAAAA,EAAE,EAAE;AAHM;AAJN,KAZoC;AAsB5CC,IAAAA,eAAe,EAAE;AACfb,MAAAA,IAAI,EAAEC,mBAAUC,IADD;AAEfI,MAAAA,KAAK,EAAE,kBAFQ;AAGfE,MAAAA,QAAQ,EAAE,SAHK;AAIfC,MAAAA,UAAU,EAAE;AACVC,QAAAA,KAAK,EAAE,gBADG;AAEVC,QAAAA,GAAG,EAAE,IAFK;AAGVC,QAAAA,EAAE,EAAE;AAHM;AAJG;AAtB2B,GAA7B,EAgCd;AACDE,IAAAA,OAAO,EAAE,CACP;AACEC,MAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,kBAAZ,CADV;AAEEC,MAAAA,MAAM,EAAE;AACNC,QAAAA,IAAI,EAAE,IADA;AAENC,QAAAA,GAAG,EAAE;AAFC;AAFV,KADO;AADR,GAhCc,CAAjB;;AA4CAvB,EAAAA,QAAQ,CAACwB,SAAT,GAAsBC,MAAD,IAAY;AAC/BzB,IAAAA,QAAQ,CAAC0B,SAAT,CAAmBD,MAAM,CAACE,aAA1B,EAAyC;AACvCC,MAAAA,UAAU,EAAE,IAD2B;AAEvCf,MAAAA,QAAQ,EAAE;AAF6B,KAAzC;AAIAb,IAAAA,QAAQ,CAAC0B,SAAT,CAAmBD,MAAM,CAACI,IAA1B,EAAgC;AAC9BD,MAAAA,UAAU,EAAE,IADkB;AAE9Bf,MAAAA,QAAQ,EAAE;AAFoB,KAAhC;AAIAb,IAAAA,QAAQ,CAAC8B,aAAT,CAAuBL,MAAM,CAACM,MAA9B,EAAsC;AACpCC,MAAAA,OAAO,EAAE,kBAD2B;AAEpCJ,MAAAA,UAAU,EAAE;AAFwB,KAAtC;AAID,GAbD;;AAeA,SAAO5B,QAAP;AACD,CA7DD;;eA+DeH,Q","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\r\nimport Sequelize from 'sequelize';\r\n\r\n/**\r\n * Progress ORM model\r\n * Belongs to one User/Questionnaire\r\n * \r\n * @param {Object} sequelize \r\n * @param {Object} DataTypes \r\n */\r\nconst progress = (sequelize, DataTypes) => {\r\n  const Progress = sequelize.define('progress', {\r\n    id: {\r\n      allowNull: false,\r\n      primaryKey: true,\r\n      type: Sequelize.UUID,\r\n      defaultValue: () => uuidv4()\r\n    },\r\n    isComplete: {\r\n      type: DataTypes.BOOLEAN,\r\n      field: 'is_complete',\r\n      allowNull: false\r\n    },\r\n    userId: {\r\n      type: Sequelize.UUID,\r\n      onDelete: 'CASCADE',\r\n      field: 'user_id',\r\n      references: {\r\n        model: 'users',\r\n        key: 'id',\r\n        as: 'userId'\r\n      }\r\n    },\r\n    questionnaireId: {\r\n      type: Sequelize.UUID,\r\n      field: 'questionnaire_id',\r\n      onDelete: 'CASCADE',\r\n      references: {\r\n        model: 'questionnaires',\r\n        key: 'id',\r\n        as: 'questionnaireId'\r\n      }\r\n    }\r\n  }, {\r\n    indexes: [\r\n      {\r\n        fields: ['user_id', 'questionnaire_id'],\r\n        unique: {\r\n          args: true,\r\n          msg: 'Progress with such user and questionnaire already exist'\r\n        }\r\n      }\r\n    ]\r\n  });\r\n\r\n  Progress.associate = (models) => {\r\n    Progress.belongsTo(models.Questionnaire, {\r\n      foreignKey: 'id',\r\n      onDelete: 'CASCADE',\r\n    });\r\n    Progress.belongsTo(models.User, {\r\n      foreignKey: 'id',\r\n      onDelete: 'CASCADE',\r\n    });\r\n    Progress.belongsToMany(models.Answer, {\r\n      through: 'progress_answers',\r\n      foreignKey: 'progress_id'\r\n    });\r\n  };\r\n\r\n  return Progress;\r\n};\r\n\r\nexport default progress;\r\n"],"file":"progress.js"}